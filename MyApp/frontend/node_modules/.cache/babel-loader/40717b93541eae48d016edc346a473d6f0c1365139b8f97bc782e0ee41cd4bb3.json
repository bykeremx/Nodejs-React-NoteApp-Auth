{"ast":null,"code":"var _s = $RefreshSig$();\nconst useAuth = () => {\n  _s();\n  const {\n    AuthState,\n    AuthDispatch\n  } = useContext(AuthContext);\n  const navigate = useNavigate();\n  const Login = async (email, password) => {\n    try {\n      const LoginFetch = await fetch('http://localhost:8080/api/user/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!LoginFetch.ok) {\n        const errorData = await LoginFetch.json();\n        throw new Error(errorData.message || \"Giriş başarısız oldu.\");\n      }\n      const data = await LoginFetch.json();\n      AuthDispatch({\n        type: 'LOGIN',\n        payload: {\n          token: data.token,\n          user: data.user\n        }\n      });\n      localStorage.setItem('token', data.token);\n      navigate('/dashboard'); // Giriş başarılıysa yönlendirme\n    } catch (error) {\n      console.error(\"Giriş Hatası:\", error.message);\n      return error.message;\n    }\n  };\n  return {\n    AuthState,\n    Login\n  };\n};\n_s(useAuth, \"YA5Uejm1UU63yJXhJgfKwIscgcU=\", true);\nexport default useAuth;","map":{"version":3,"names":["useAuth","_s","AuthState","AuthDispatch","useContext","AuthContext","navigate","useNavigate","Login","email","password","LoginFetch","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","data","type","payload","token","user","localStorage","setItem","error","console"],"sources":["C:/Users/mkere/Desktop/Mern-Stack-Uygulamaları/notUygulaması/frontend/src/hooks/useAuth.jsx"],"sourcesContent":["const useAuth = () => {\r\n    const { AuthState, AuthDispatch } = useContext(AuthContext);\r\n    const navigate = useNavigate();\r\n\r\n    const Login = async (email, password) => {\r\n        try {\r\n            const LoginFetch = await fetch('http://localhost:8080/api/user/login', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ email, password }),\r\n            });\r\n\r\n            if (!LoginFetch.ok) {\r\n                const errorData = await LoginFetch.json();\r\n                throw new Error(errorData.message || \"Giriş başarısız oldu.\");\r\n            }\r\n\r\n            const data = await LoginFetch.json();\r\n            AuthDispatch({\r\n                type: 'LOGIN',\r\n                payload: {\r\n                    token: data.token,\r\n                    user: data.user,\r\n                },\r\n            });\r\n            localStorage.setItem('token', data.token);\r\n            navigate('/dashboard'); // Giriş başarılıysa yönlendirme\r\n        } catch (error) {\r\n            console.error(\"Giriş Hatası:\", error.message);\r\n            return error.message;\r\n        }\r\n    };\r\n\r\n    return {\r\n        AuthState,\r\n        Login,\r\n    };\r\n};\r\n\r\nexport default useAuth;"],"mappings":";AAAA,MAAMA,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAM;IAAEC,SAAS;IAAEC;EAAa,CAAC,GAAGC,UAAU,CAACC,WAAW,CAAC;EAC3D,MAAMC,QAAQ,GAAGC,WAAW,CAAC,CAAC;EAE9B,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACrC,IAAI;MACA,MAAMC,UAAU,GAAG,MAAMC,KAAK,CAAC,sCAAsC,EAAE;QACnEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAS,CAAC;MAC5C,CAAC,CAAC;MAEF,IAAI,CAACC,UAAU,CAACO,EAAE,EAAE;QAChB,MAAMC,SAAS,GAAG,MAAMR,UAAU,CAACS,IAAI,CAAC,CAAC;QACzC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,uBAAuB,CAAC;MACjE;MAEA,MAAMC,IAAI,GAAG,MAAMZ,UAAU,CAACS,IAAI,CAAC,CAAC;MACpCjB,YAAY,CAAC;QACTqB,IAAI,EAAE,OAAO;QACbC,OAAO,EAAE;UACLC,KAAK,EAAEH,IAAI,CAACG,KAAK;UACjBC,IAAI,EAAEJ,IAAI,CAACI;QACf;MACJ,CAAC,CAAC;MACFC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEN,IAAI,CAACG,KAAK,CAAC;MACzCpB,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOwB,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAACR,OAAO,CAAC;MAC7C,OAAOQ,KAAK,CAACR,OAAO;IACxB;EACJ,CAAC;EAED,OAAO;IACHpB,SAAS;IACTM;EACJ,CAAC;AACL,CAAC;AAACP,EAAA,CAvCID,OAAO;AAyCb,eAAeA,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}